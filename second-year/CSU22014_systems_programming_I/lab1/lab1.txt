Lab 1 : Simple sorting

This lab exists purely to give you some experience of using the editor and C compiler on Linux. You do not need to submit any work arising from this lab.

CSU22014 labs involve C programming on Unix-like systems, such as Linux. All of the lab work will be tested on Linux machines such as macneill.scss.tcd.ie, and the lab machines in LG12 which also all run Linux. You can use these lab machines to develop your code.

Which IDE do we use?

We will use something much better than an IDE. We will use a text editor to edit our C source files, and we will use the clang compiler to compile our programs.
We won't use an IDE in this module, and I very strongly recommend that you don't use one.

Once you are on a Linux machine
If you are in LG12 all the machines run Linux, and you can write your program directly using the machine in LG12. Your TCD home directory should be mounted on the machine in LG12 when you log in.

If you are not in LG12, you will need to connect to a Linux machine. The School has a student server called macneill.scss.tcd.ie that you can connect to. If you are on a machine outside one of the School's labs,
you should connect to the SCSS virtual private network (VPN) before you attempt to connect to macneill. For instructions on connecting to macneill, please see the menu item "Linux Help" on the left menu
of the CSU22014 Blackboard page.

Once you have connected to a Linux machine, you can use normal Unix commands. If you haven't used a Unix-like OS before, then you're in for a treat, because
Unix is great. To see the files in your current director type:
        ls
Create a directory for cs2014 lab work:
        mkdir cs2014
Now switch to that directory:
        cd cs2014
Create a directory for your first lab:
        mkdir lab1
Now switch to that directory
        cd lab1

Download the following files to that directory.

http://www.cs.tcd.ie/David.Gregg/cs2014/labs/sorts.c
http://www.cs.tcd.ie/David.Gregg/cs2014/labs/numbers.txt

On many (but not all) Unix machines you can use the wget command to download files. For example:
	wget http://www.cs.tcd.ie/David.Gregg/cs2014/labs/sorts.c


There are two important types of remote connections to Linux machines: connections with a simple terminal emulator, or connections with an
X-windows client. If you have a simple terminal emulator, then you will need to use editors that run inside a terminal emulator, such as nano
or vim. In this case, the editor takes over your terminal, and you will probably need to open a second terminal for typing commands. But
if you are working with an X-windows client, then you can use editors like gedit and emacs that run within x-windows. Unfortunately, the available
editors on the lab machines change from time to time, so you may need to try a couple of different editors. If you have an x-session
open, then to use gedit type:
     gedit sorts.c &

If gedit is not available, you could try emacs:
     emacs sorts.c &

The & at the end of the command tells the terminal to run the gedit program, but not to wait for it to complete. This allows you to
type more commands before the gedit command completes. This is what you want on a Linux machine running X-windows.

If you are running your terminal from a machine that is not running X-windows, then you probably want to run your editor inside the
terminal program. In this case, you would use a simpler editor such as nano or vim, which runs inside the terminal.
	nano sorts.c

Note that when you are using a terminal editor like nano, you don't want to have the & character at the end of the command,
because the editor is running within the terminal. In this case you will need a second terminal to compile and run your
program.

To compile your program type one of the following:
        clang -o sorts sorts.c
        gcc -o sorts sorts.c
        cc -o sorts sorts.c

These are various C compilers. The standard C compiler on Unix systems is called cc. Gcc is the GNU C compiler. On most Linux systems, the
gcc compiler is the standard compiler, so cc is just another name for gcc. Clang is a relatively new C compiler. Its error messages are
usually much easier to understand than the error messages in gcc. Typically gcc is installed on almost any Unix system, whereas
clang is rarer. However, clang is becoming increasingly popular because its error messages are so much better than gcc's.

To run your program type:
        ./sorts

The file 'sorts.c' contains a simple program to read in some numbers
from a text file, sort them into increasing order, and write them to
the screen. The file 'numbers.txt' contains some numbers to sort.

The existing sorts.c program uses the "funny" sort algorithm to sort the numbers. In addition there are prototypes, but no code for bubble
sort, selection sort and insertion sort. Write the code for these sorts, and test it out in this program. For selection sort, you can
use the existing findMin function (if you want).

Next modify each sorting function so that it returns the number of times that the inner loop of the sort is executed. Modify the main()
function so that it sorts the same original array with each sorting algorithm, and writes out the number of iterations used by each
algorithm.

The purpose of this lab is purely to get familiar with Unix-like systems, the C compiler, and the C syntax. There is no need to submit
any work for marking, or to demo your work. We'll start marked labs next week.

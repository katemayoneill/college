[ Due 13th of February 2022 before 23:59 ]
The first few prime numbers are:  
2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , ...
One technique for finding all the prime numbers in the range from 2 through to any given number N is known as the Sieve of Eratosthenes [see Wikipedia page: Sieve of Eratosthenes]. The technique starts by listing in sequence all the numbers from 2 through to the given number N:
2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , ... , N.
The first number 2 is a prime number, but the higher multiples of 2 ( 4, 6, 8, 10, 12, 14, ... ) are not, and so they are crossed out in the sequence:
2 , 3 ,  4 , 5 ,  6  , 7 ,  8  , 9 , 10  , 11 , 12  , 13 ,  14  , 15 , 16  , 17 , 18  , 19 ,   20  , 21 ,  22  , 23 ,  24  , 25 , ... ,  N.
The next number after 2 that was not crossed out is 3, the next prime, but then all higher multiples of 3 ( 6, 9, 12, 15, 18, 21, ... ) are not prime, and so they are crossed out in the squence (assuming they are not already crossed out):  
2 , 3 ,  4 , 5 ,  6  , 7 ,  8  ,   9  , 10  , 11 , 12  , 13 ,  14  , 15  , 16  , 17 , 18  , 19 ,   20  ,   21 ,  22  , 23 ,  24  , 25 , ... ,  N.
The next number after 3 that was not crossed out is 5, the next prime, but then all higher multiples of 5 ( 10, 15, 20, 25, 30, 35, ... ) are not prime, and so they are crossed out in the sequence (assuming they are not already crossed out):
2 , 3 ,  4 , 5 ,  6  , 7 ,  8  ,   9  , 10  , 11 , 12  , 13 ,  14  , 15  , 16  , 17 , 18  , 19 ,   20  ,   21 ,  22  , 23 ,  24  ,   25 , ... ,  N.
This procedure is repeated until a number is reach in the sequence that has not been crossed out and whose value is greater than the square root of N, then all the numbers that are not crossed out in the sequence will be the primes numbers from 2 through to the given number N.
Write a Java program which uses the Sieve of Eratosthenes to compute the prime numbers from 2 up to a given number N which is entered by the user. As part of your solution you must use an array to represent the sequence of numbers (which may contain both crossed out and non-crossed out numbers). Also, your program must implement and use (at least) the following static methods:
createSequence which takes a positive integer N (whose value is at least 2) and which returns an array initialised to represent the sequence of numbers from 2 through to N. [Hint: what would be the best way to represent the sequence of numbers using an array, so that, both crossed out and non-crossed numbers can be represent and additionally the following methods are easily implemented?]
crossOutHigherMultiples which takes a sequence of numbers σ (which may contain both crossed out and non-crossed out numbers) and a number n, and which crosses out all higher multiples of the given number n from the given sequence of numbers σ.
sieve which takes a positive integer N (whose value is at least 2) and which returns a sequence of numbers σ (represented as array) from 2 through to N where all non-prime numbers have been crossed out from the sequence σ using the Sieve of Eratosthenes technique.
sequenceToString which takes a sequence of numbers σ (which may contain both crossed out and non-crossed out numbers) and which returns a String representation of the given sequence of numbers σ (where crossed out numbers are denoted by encasement in square bracket characters) separated by commas characters, e.g., given 2nd last sequence above, of crossed out and non-crossed out numbers, this method should return a reference to the String object "2, 3, [4], 5, [6], 7, [8], [9], [10], 11, [12], 13, [14], [15], [16], 17, [18], 19, [20], [21], [22], 23, [24], 25, ... ".
nonCrossedOutSubseqToString which takes a sequence of numbers σ (which may contain both crossed out and non-crossed out numbers) and which returns a String representation of the sub-sequence of only non-crossed out numbers separated by comma characters, e.g., given the 2nd last sequence above, of crossed out and non-crossed out numbers, this method should return a reference to the String object "2, 3, 5, 7, 11, 13, 17, 19, 23, 25, ... ".
main which allows a user to enter a positive integer N (whose value is at least 2) and which then prints to the standard output the prime numbers from 2 through to the entered number N separated by commas.
Example input and output from the program is as follows:
Enter int >= 2 : 30
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
2, 3, [4], 5, [6], 7, [8], 9, [10], 11, [12], 13, [14], 15, [16], 17, [18], 19, [20], 21, [22], 23, [24], 25, [26], 27, [28], 29, [30]
2, 3, [4], 5, [6], 7, [8], [9], [10], 11, [12], 13, [14], [15], [16], 17, [18], 19, [20], [21], [22], 23, [24], 25, [26], [27], [28], 29, [30]
2, 3, [4], 5, [6], 7, [8], [9], [10], 11, [12], 13, [14], [15], [16], 17, [18], 19, [20], [21], [22], 23, [24], [25], [26], [27], [28], 29, [30]
2, 3, 5, 7, 11, 13, 17, 19, 23, 29
Just before you submit your program you need to do a self-assessment exercise to evaluate how well you did... 
Copy the multi line comment below and put it at the top of your program. Put in a    mark and a comment for each criterion (even if you have given yourself full marks, otherwise one mark will be deducted per criterion that is missing this information). 
/* SELF ASSESSMENT 
   1.    createSequence:
Did I use the correct method definition?
Mark out of 5:
Comment:
Did I create an array of size n (passed as the parameter) and initialise it?
Mark out of 5:
Comment:
Did I return the correct item?
Mark out of 5:
Comment:
   2.    crossOutMultiples
Did I use the correct method definition?
Mark out of 5:
Comment:
Did I ensure the parameters are not null and one of them is a valid index into the array
Mark out of 2:
Comment:
Did I loop through the array using the correct multiple?
Mark out of 5:
Comment:
Did I cross out correct items in the array that were not already crossed out?
Mark out of 3:
Comment:
   3.    sieve   
Did I have the correct function definition?
Mark out of 5:
Comment:
Did I make calls to other methods?
Mark out of 5:
Comment:      
Did I return an array with all non-prime numbers are crossed out?
Mark out of 2:
Comment:
   4.    sequenceTostring  
Did I have the correct function definition?
Mark out of 5:
Comment:
Did I ensure the parameter to be used is not null?
Mark out of 3:
Comment: 
Did I Loop through the array updating the String variable with the non-crossed out numbers and the crossed numbers in brackets? 
Mark out of 10:
Comment:    
   5.    nonCrossedOutSubseqToString  
Did I have the correct function definition
Mark out of 5:
Comment:        
Did I ensure the parameter to be used is not null?  
Mark out of 3:
Comment:
Did I loop through the array updating the String variable with just the non-crossed out numbers? 
Mark out of 5:
Comment:
   6.    main  
Did I ask  the user for input n and handles input errors?  
Mark out of 5:
Comments:
Did I make calls to other methods (at least one)?
Mark out of 5:
Comment:  
Did I print the output as shown in the question?  
Mark out of 5:
Comment:  
   7.    Overall
Is my code indented correctly?
Mark out of 4:
Comments:
Do my variable names make sense?
Mark out of 4:
Comments:
Do my variable names, method names and class name follow the Java coding standard
Mark out of 4:
Comments:
      Total Mark out of 100 (Add all the previous marks): 
*/

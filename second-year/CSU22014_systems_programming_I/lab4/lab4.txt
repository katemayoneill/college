This is the third and final part of the bench calculator. This week you will complete the bench calculator by extending it further to compute
the value of infix expressions. For example, if the input is: ( 7 + 8 ) X 3 - 22 The output should be: 23

Note that on the command line, left and right brackets are treated as special characters. Therefore you need to write them as "\(" and
"\)" on the command line. For example, you would write: \( 7 + 8 \) X 3 - 22

A good way to evaluate expressions is to first convert them to reverse Polish notation (RPN), and then use the your existing algorithm for
evaluating RPN expressions. There is a simple algorithm for converting infix expressions to RPN, which uses a stack of operations.

for each token in the input string {
  if ( token is a number ) {
    append token to the output string
  }
  else if (token is a left bracket) {
    push bracket to stack
  }
  else if ( token in an operator ) {
    while ( there is operator  op  on top of the stack  AND op has equal or higher precedence than token ) {
      pop stack and append op to the output string
    }
    push token operator to stack
  }
  else if ( token is right bracket ) {
    while ( top of stack != left bracket ) {
      pop operator from stack and append to output string
    pop left bracket
  }
}
pop remaining stack items and append each of them to the end of your reverse Polish notation expression.

Note that you can assume that the expression that your program
receives is well formed. You do not have to do any complicated error
checking.

You can assume that the precedence of operators is as follows:
    ^
    X, /
    +, -

You may use the C mathematics library (#include <math.h>) to implement the pow function. On older C compilers and on the 
Apple Mac you must pass the -lm flag if you are using the mathematics library.
gcc -o calc -lm simple-main.c stack.c infix.c postfix.c

All three bench calculator labs must be submitted for credit. I am in the process of setting up Submitty to receive your lab submissions.